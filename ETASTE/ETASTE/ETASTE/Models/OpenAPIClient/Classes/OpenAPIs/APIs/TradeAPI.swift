//
// TradeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class TradeAPI {
    /**
     Create Trade.
     
     - parameter tradeCreate: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTrade(tradeCreate: TradeCreate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createTradeWithRequestBuilder(tradeCreate: tradeCreate).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Trade.
     - POST /trade
     - parameter tradeCreate: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createTradeWithRequestBuilder(tradeCreate: TradeCreate? = nil) -> RequestBuilder<Void> {
        let path = "/trade"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tradeCreate)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get Trade by ID.
     
     - parameter userId: (path) User Id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTrade(userId: Int64, completion: @escaping ((_ data: Trade?,_ error: Error?) -> Void)) {
        getTradeWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Trade by ID.
     - GET /trade/{userId}
     - parameter userId: (path) User Id. 
     - returns: RequestBuilder<Trade> 
     */
    open class func getTradeWithRequestBuilder(userId: Int64) -> RequestBuilder<Trade> {
        var path = "/trade/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Trade>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Trade for Store by ID.
     
     - parameter storeId: (path) Store Id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTradeStore(storeId: Int64, completion: @escaping ((_ data: TradeStore?,_ error: Error?) -> Void)) {
        getTradeStoreWithRequestBuilder(storeId: storeId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Trade for Store by ID.
     - GET /trade/store/{storeId}
     - parameter storeId: (path) Store Id. 
     - returns: RequestBuilder<TradeStore> 
     */
    open class func getTradeStoreWithRequestBuilder(storeId: Int64) -> RequestBuilder<TradeStore> {
        var path = "/trade/store/{storeId}"
        let storeIdPreEscape = "\(storeId)"
        let storeIdPostEscape = storeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{storeId}", with: storeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TradeStore>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Trade is Completed.
     
     - parameter tradeId: (path) trade Id. 
     - parameter tradeComplete: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTrade(tradeId: Int64, tradeComplete: TradeComplete? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateTradeWithRequestBuilder(tradeId: tradeId, tradeComplete: tradeComplete).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update Trade is Completed.
     - PATCH /trade/complete/{tradeId}
     - parameter tradeId: (path) trade Id. 
     - parameter tradeComplete: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateTradeWithRequestBuilder(tradeId: Int64, tradeComplete: TradeComplete? = nil) -> RequestBuilder<Void> {
        var path = "/trade/complete/{tradeId}"
        let tradeIdPreEscape = "\(tradeId)"
        let tradeIdPostEscape = tradeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tradeId}", with: tradeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tradeComplete)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
