//
// UserAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class UserAPI {
    /**
     Create User.
     
     - parameter user: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUser(user: User? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        print("startsignupok")
        createUserWithRequestBuilder(user: user).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Create User.
     - POST /user
     - parameter user: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createUserWithRequestBuilder(user: User? = nil) -> RequestBuilder<Void> {
        let path = "/user"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete User.
     
     - parameter userId: (path) User Id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUser(userId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteUserWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete User.
     - DELETE /user/{userId}
     - parameter userId: (path) User Id. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserWithRequestBuilder(userId: Int64) -> RequestBuilder<Void> {
        var path = "/user/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Login User.
     
     - parameter userLogin: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loginUser(userLogin: UserLogin? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        loginUserWithRequestBuilder(userLogin: userLogin).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Login User.
     - POST /user/login
     - parameter userLogin: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func loginUserWithRequestBuilder(userLogin: UserLogin? = nil) -> RequestBuilder<Void> {
        let path = "/user/login"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userLogin)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Logout User.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logoutUser(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        logoutUserWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Logout User.
     - GET /user/logout
     - returns: RequestBuilder<Void> 
     */
    open class func logoutUserWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/user/logout"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
