//
// FavoriteAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class FavoriteAPI {
    /**
     Create Favorite.
     
     - parameter favoriteCreate: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createFavorite(favoriteCreate: FavoriteCreate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createFavoriteWithRequestBuilder(favoriteCreate: favoriteCreate).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Favorite.
     - POST /favorite
     - parameter favoriteCreate: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createFavoriteWithRequestBuilder(favoriteCreate: FavoriteCreate? = nil) -> RequestBuilder<Void> {
        let path = "/favorite"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: favoriteCreate)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete Favorite.
     
     - parameter storeId: (path) Store Id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFavorite(storeId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteFavoriteWithRequestBuilder(storeId: storeId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete Favorite.
     - DELETE /favorite/{storeId}
     - parameter storeId: (path) Store Id. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteFavoriteWithRequestBuilder(storeId: Int64) -> RequestBuilder<Void> {
        var path = "/favorite/{storeId}"
        let storeIdPreEscape = "\(storeId)"
        let storeIdPostEscape = storeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{storeId}", with: storeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get favorite by ID.
     
     - parameter userId: (path) user Id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFavorite(userId: Int64, completion: @escaping ((_ data: Favorite?,_ error: Error?) -> Void)) {
        getFavoriteWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get favorite by ID.
     - GET /favorite/{userId}
     - parameter userId: (path) user Id. 
     - returns: RequestBuilder<Favorite> 
     */
    open class func getFavoriteWithRequestBuilder(userId: Int64) -> RequestBuilder<Favorite> {
        var path = "/favorite/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Favorite>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
